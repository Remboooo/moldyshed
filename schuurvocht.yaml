esphome:
  name: schuurvocht

esp8266:
  board: d1_mini

logger:
  level: info

captive_portal:

<<: !include secrets.yaml

substitutions:
  interval: "250ms"
  averaging: "40"
  sensor_pin_outside: D7
  sensor_pin_inside: D6
  fan_pwm_pin: D5
  fan_enable_pin: D3
  fan_rpm_pin: D2

switch:
  - platform: template
    name: "Schuur fan control enable"
    id: enable_auto
    optimistic: true
    on_turn_on:
      then:
        lambda: |-
          ESP_LOGI("schuur", "enable auto fan control");
    on_turn_off:
      then:
        lambda: |-
          ESP_LOGI("schuur", "disable auto fan control");

fan:
  - platform: speed
    output: fan_pwm
    name: "Schuur fan"
    id: the_fan
    on_speed_set:
      sensor.template.publish:
        id: fan_pwm_percent
        state: !lambda return id(the_fan).speed;

output:
  - platform: esp8266_pwm
    pin: $fan_pwm_pin
    frequency: 1000 Hz
    id: fan_pwm
    power_supply: fan_enable

power_supply:
  - pin: $fan_enable_pin
    id: fan_enable
    enable_time: 1s
    keep_on_time: 0s

globals:
  - id: raw_in_t
    type: double
  - id: raw_in_rh
    type: double
  - id: raw_out_t
    type: double
  - id: raw_out_rh
    type: double
  - id: raw_in_m
    type: double
  - id: raw_out_m
    type: double
  - id: raw_out_rh_at_in_t
    type: double

sensor:
  - platform: dht
    pin: $sensor_pin_outside
    model: AM2302
    temperature:
      name: "Temp buiten"
      id: out_t
      filters:
      - median:
          window_size: $averaging
          send_every: $averaging
      on_raw_value:
        then:
        - lambda: id(raw_out_t) = x;
    humidity:
      name: "RH buiten"
      id: out_rh
      filters:
      - median:
          window_size: $averaging
          send_every: $averaging
      on_raw_value:
        then:
        - lambda: id(raw_out_rh) = x;
    update_interval: $interval
  - platform: dht
    pin: $sensor_pin_inside
    model: AM2302
    temperature:
      name: "Temp schuur"
      id: in_t
      filters:
      - median:
          window_size: $averaging
          send_every: $averaging
      on_raw_value:
        then:
        - lambda: id(raw_in_t) = x;
    humidity:
      name: "RH schuur"
      id: in_rh
      filters:
      - median:
          window_size: $averaging
          send_every: $averaging
      on_raw_value: 
        then:
        - lambda: id(raw_in_rh) = x;
        - lambda: |-
            auto t_i = id(raw_in_t);
            auto rh_i = id(raw_in_rh);
            auto m_i = 6.112 * exp((17.67*t_i)/(t_i+243.5))*rh_i*18.02 / ((273.15+t_i) * 100 * 0.08314);
            
            auto t_o = id(raw_out_t);
            auto rh_o = id(raw_out_rh);
            auto m_o = 6.112 * exp((17.67*t_o)/(t_o+243.5))*rh_o*18.02 / ((273.15+t_o) * 100 * 0.08314);
            
            auto rh_o_t_i = (m_o / ((t_i+273.15)/(t_o+273.15))) * exp(-(17.67*t_i)/(t_i+243.5))*(0.075487*t_i+20.6193);
           
            id(raw_in_m) = m_i;
            id(raw_out_m) = m_o;
            id(raw_out_rh_at_in_t) = rh_o_t_i;
           
            id(in_m).publish_state(m_i);
            id(out_m).publish_state(m_o);
            id(out_rh_at_in_t).publish_state(rh_o_t_i);
    update_interval: $interval
  - platform: template
    name: "Vochtgehalte schuur"
    icon: mdi:water
    id: in_m
    unit_of_measurement: "g/m³"
    filters:
    - median:
        window_size: $averaging
        send_every: $averaging
  - platform: template
    name: "Vochtgehalte buiten"
    icon: mdi:water
    id: out_m
    unit_of_measurement: "g/m³"
    filters:
    - median:
        window_size: $averaging
        send_every: $averaging
  - platform: template
    name: "RH buiten bij schuurtemperatuur"
    icon: mdi:water-percent
    id: out_rh_at_in_t
    unit_of_measurement: "%"
    filters:
    - median:
        window_size: $averaging
        send_every: $averaging
    on_raw_value:
      if:
        condition:
          switch.is_on: enable_auto
        then:
        - lambda: |-
            auto rh_in = id(raw_in_rh);
            auto rh_couldbe = id(raw_out_rh_at_in_t);
            int desired_speed = round((rh_in - rh_couldbe) / 30.0 * 100.0);
            desired_speed = min(100, max(0, desired_speed));
            auto call = (desired_speed > 0) ? id(the_fan).turn_on() : id(the_fan).turn_off();
            call.set_speed(desired_speed);
            call.perform();
  - platform: template
    id: fan_pwm_percent
    icon: "mdi:fan"
    name: "Schuur fan %"
    unit_of_measurement: "%"
    filters:
    - median:
        window_size: $averaging
        send_every: $averaging
  - platform: pulse_counter
    pin: 
      number: $fan_rpm_pin
      mode: INPUT_PULLUP
    id: fan_rpm
    icon: "mdi:fan"
    name: Schuur fan speed
    update_interval: $interval
    unit_of_measurement: "rpm"
    filters:
    - median:
        window_size: $averaging
        send_every: $averaging